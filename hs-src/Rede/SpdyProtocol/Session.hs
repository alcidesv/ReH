
module Rede.SpdyProtocol.Session(
    -- trivialSession
    basicSession
    ,showHeadersIfPresent
    ) where


import           Control.Concurrent                      (forkIO)
import           Control.Monad.IO.Class                  (liftIO)
import           Control.Monad.Trans.Class               (lift)
import           Control.Monad.Trans.Reader
import           Data.Conduit
import qualified Data.Streaming.Zlib                     as Z

-- import           Data.Conduit.Lift                       (distribute)
-- import qualified Data.Conduit.List                       as CL
import qualified Data.ByteString                         as B
import           Data.ByteString.Char8                   (pack)
import           Data.Default                            (def)
import           Control.Concurrent.MVar
import qualified Data.Map                                as MA

import           Rede.SpdyProtocol.Framing.AnyFrame
import           Rede.SpdyProtocol.Framing.Frame
import           Rede.SpdyProtocol.Framing.Ping
-- import qualified Rede.SpdyProtocol.Framing.GoAway        as GoA
import           Rede.MainLoop.StreamPlug
import           Rede.SpdyProtocol.Framing.KeyValueBlock
import qualified Rede.SpdyProtocol.Framing.Settings      as SeF
import qualified Rede.SpdyProtocol.Framing.SynStream     as SyS
import           Rede.SpdyProtocol.Streams.State
import           Rede.SpdyProtocol.TrivialTestWorker     (fsWorker)



initialSettings :: SeF.SettingsFrame
initialSettings = SeF.SettingsFrame {
     SeF.prologue = def 
    ,SeF.persistSettings = [
        (SeF.InitialWindowSize_S, 65536, SeF.None_PS)
    ]
}


-- goAwayMsg :: GoA.GoAwayFrame
-- goAwayMsg = GoA.GoAwayFrame {
--      GoA.prologue = def 
--     ,GoA.statusCode = GoA.OK_GAR
--     ,GoA.lastGoodStream = 0
-- }



data SimpleSessionStateRecord = SimpleSessionStateRecord {
    streamInputs :: MVar (MA.Map Int (MVar  AnyFrame)) 
    -- ,streamsOutput :: MVar (Maybe AnyFrame)

    ,sendZLib     :: MVar Z.Deflate
    ,recvZLib     :: MVar Z.Inflate
    ,streamInit   :: Int -> IO () -> StreamStateT IO () -> IO ()
}


type SessionM = ReaderT SimpleSessionStateRecord 
 
-- | Super-simple session manager without flow control and such.... 
-- but using StreamWorkers already....
-- TODO: without proper flow control, we are in troubles....
basicSession :: IO ( (Sink AnyFrame IO () ), (Source IO AnyFrame ) )
basicSession = do

    -- Create the input record.... 
    stream_inputs     <- newMVar $ MA.empty
    output_mvar       <- (newEmptyMVar :: IO (MVar AnyFrame) )
    send_zlib         <- Z.initDeflateWithDictionary 2 zLibInitDict Z.defaultWindowBits
    send_zlib_mvar    <- newMVar send_zlib
    recv_zlib         <- Z.initInflateWithDictionary Z.defaultWindowBits zLibInitDict
    recv_zlib_mvar    <- newMVar recv_zlib

    session_record    <- return $ SimpleSessionStateRecord {
        streamInputs = stream_inputs
        ,sendZLib    = send_zlib_mvar
        ,recvZLib    = recv_zlib_mvar
        ,streamInit  = \ stream_id fin -> initStreamState stream_id fin send_zlib_mvar recv_zlib_mvar 
        }


    packet_sink <- return $ transPipe (\ x -> runReaderT x session_record)  (statefulSink output_mvar)
    packet_source <- return (createTrivialSource output_mvar)
    
    return (packet_sink, packet_source)


takesInput :: MVar AnyFrame ->  Source (StreamStateT IO) AnyFrame
takesInput input_mvar = do 
    frame <- liftIO $ takeMVar input_mvar
    -- liftIO $ putStrLn "Got something"
    yield frame 
    takesInput input_mvar


streamConduit :: MVar AnyFrame -> MVar  AnyFrame -> StreamStateT IO ()
streamConduit input_mvar drop_output_here_mvar = (takesInput input_mvar)  $= inputPlug 
        =$= (transPipe liftIO fsWorker) 
        =$= (outputPlug :: Conduit StreamOutputAction (StreamStateT IO) AnyFrame)
        $$  (streamOutput drop_output_here_mvar)


-- | Takes output from the stream conduit and puts it on the output mvar. 
--   ATTENTION: When a stream finishes, the conduit closes and yields a  Nothing to 
--   signal that
streamOutput :: MVar AnyFrame -> Sink AnyFrame (StreamStateT IO) () 
streamOutput  output_mvar  = do 
    any_frame_maybe <- await 
    case any_frame_maybe of  

        -- The stream is alive
        Just anyframe -> do
            liftIO $ putMVar output_mvar anyframe
            streamOutput output_mvar

        --The stream wishes to finish, in this case, 
        --don't put anything in the output MVar, but 
        --call a provided finalizer
        Nothing  -> do
            lift streamFinalize
            -- Now let natural finalization of the conduit to take 
            -- place...



-- IMPLEMENT: iDropThisFrame  (Ping_CFT) 

iDropThisFrame :: AnyControlFrame -> Bool
iDropThisFrame  (SettingsFrame_ACF     _ )    = True 
iDropThisFrame  (WindowUpdateFrame_ACF _ )    = True
iDropThisFrame  _                             = False



statefulSink :: MVar  AnyFrame -> Sink AnyFrame (SessionM IO) ()
statefulSink  somebody_drops_outputs_here  = do 
    anyframe_maybe <- await 
    session_record <- lift $ ask
    stream_init     <- return $ streamInit session_record 


    case anyframe_maybe of 

        Just anyframe -> do 

            case anyframe of 

                (AnyControl_AF control_frame)  | iDropThisFrame control_frame -> do 
                    liftIO $ putStrLn $ "Frame dropped: " ++ (show control_frame)
                    continue -- ##

                -- We started here: sending ping requests.... often we also 
                -- need to answer to them...
                (AnyControl_AF (PingFrame_ACF ping_frame)) -> do
                    case handlePingFrame ping_frame of 
                        Just  answer ->
                            liftIO $ putMVar somebody_drops_outputs_here $ wrapCF answer 
                        Nothing      ->
                            return ()
                    continue -- ##


                frame@(AnyControl_AF (SynStream_ACF syn_stream)) ->  let 
                        stream_id = streamIdFromFrame syn_stream
                        inputs = streamInputs session_record
                        fin = do 
                            stream_inputs <- takeMVar inputs
                            putMVar inputs $ MA.delete stream_id stream_inputs 
                    in do 
                        liftIO $ putStrLn $ "Opening stream " ++ (show stream_id)
                        stream_inputs <- liftIO $ takeMVar inputs
                        input_place   <- liftIO $ newEmptyMVar
                        liftIO $ putMVar inputs $ MA.insert stream_id input_place stream_inputs
                        liftIO $ forkIO $ stream_init stream_id fin $ streamConduit input_place somebody_drops_outputs_here
                        liftIO $ putMVar input_place frame
                        continue -- ##

                frame -> do 
                        liftIO $ putStrLn  $ "Dont't know how to handle ... " ++ (show frame)
                        continue -- ##

                (AnyControl_AF (GoAwayFrame_ACF goaway)) -> do 
                        -- To test: the socket should be closed here
                        liftIO $ putStrLn $ "GOAWAY (closing this sink) " ++ (show goaway)
                        -- Don't continue here
            
            -- Come and recurse... 
           
        Nothing -> return ()  -- So must one finish here...
  where 
    continue =  statefulSink somebody_drops_outputs_here



handlePingFrame :: PingFrame -> Maybe PingFrame
handlePingFrame p@(PingFrame _ frame_id) |  odd frame_id = Just p
handlePingFrame _ = Nothing  


showHeadersIfPresent ::  AnyFrame -> StreamStateT IO ()
showHeadersIfPresent ( AnyControl_AF ( SynStream_ACF syn_stream)) = let 
    CompressedKeyValueBlock hb = SyS.compressedKeyValueBlock syn_stream
  in do 
    uncompressed <- unpackRecvHeaders hb
    liftIO $ putStrLn $ show uncompressed 
showHeadersIfPresent _ = return ()


createTrivialSource :: MVar AnyFrame -> Source IO AnyFrame
createTrivialSource output_mvar = do 
    yield $ wrapCF initialSettings
    createTrivialSourceLoop
  where 
    createTrivialSourceLoop = do
        anyframe <- liftIO $ (takeMVar output_mvar :: IO AnyFrame)

        -- liftIO $ putStrLn $ "SENDING: " ++ (show anyframe)
        yield anyframe
        createTrivialSourceLoop


zLibInitDict :: B.ByteString
zLibInitDict = pack $ map toEnum  [
    0x00, 0x00, 0x00, 0x07, 0x6f, 0x70, 0x74, 0x69,    
    0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x04, 0x68,    
    0x65, 0x61, 0x64, 0x00, 0x00, 0x00, 0x04, 0x70,    
    0x6f, 0x73, 0x74, 0x00, 0x00, 0x00, 0x03, 0x70,    
    0x75, 0x74, 0x00, 0x00, 0x00, 0x06, 0x64, 0x65,    
    0x6c, 0x65, 0x74, 0x65, 0x00, 0x00, 0x00, 0x05,    
    0x74, 0x72, 0x61, 0x63, 0x65, 0x00, 0x00, 0x00,    
    0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x00,    
    0x00, 0x00, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,    
    0x74, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,    
    0x74, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x63, 0x63,    
    0x65, 0x70, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f,    
    0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x0f,    
    0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6c,    
    0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x00,    
    0x00, 0x00, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70,    
    0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,    
    0x00, 0x00, 0x00, 0x03, 0x61, 0x67, 0x65, 0x00,    
    0x00, 0x00, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,    
    0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x74, 0x68,    
    0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,    
    0x6e, 0x00, 0x00, 0x00, 0x0d, 0x63, 0x61, 0x63,    
    0x68, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,    
    0x6f, 0x6c, 0x00, 0x00, 0x00, 0x0a, 0x63, 0x6f,    
    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,    
    0x00, 0x00, 0x00, 0x0c, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x65,    
    0x00, 0x00, 0x00, 0x10, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f,    
    0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x10,    
    0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,    
    0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,    
    0x00, 0x00, 0x00, 0x0e, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67,    
    0x74, 0x68, 0x00, 0x00, 0x00, 0x10, 0x63, 0x6f,    
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00,    
    0x00, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,    
    0x74, 0x2d, 0x6d, 0x64, 0x35, 0x00, 0x00, 0x00,    
    0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,    
    0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x00, 0x00,    
    0x00, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,    
    0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00,    
    0x00, 0x04, 0x64, 0x61, 0x74, 0x65, 0x00, 0x00,    
    0x00, 0x04, 0x65, 0x74, 0x61, 0x67, 0x00, 0x00,    
    0x00, 0x06, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,    
    0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x70, 0x69,    
    0x72, 0x65, 0x73, 0x00, 0x00, 0x00, 0x04, 0x66,    
    0x72, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x04, 0x68,    
    0x6f, 0x73, 0x74, 0x00, 0x00, 0x00, 0x08, 0x69,    
    0x66, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x00,    
    0x00, 0x00, 0x11, 0x69, 0x66, 0x2d, 0x6d, 0x6f,    
    0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x73,    
    0x69, 0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x0d,    
    0x69, 0x66, 0x2d, 0x6e, 0x6f, 0x6e, 0x65, 0x2d,    
    0x6d, 0x61, 0x74, 0x63, 0x68, 0x00, 0x00, 0x00,    
    0x08, 0x69, 0x66, 0x2d, 0x72, 0x61, 0x6e, 0x67,    
    0x65, 0x00, 0x00, 0x00, 0x13, 0x69, 0x66, 0x2d,    
    0x75, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,    
    0x65, 0x64, 0x2d, 0x73, 0x69, 0x6e, 0x63, 0x65,    
    0x00, 0x00, 0x00, 0x0d, 0x6c, 0x61, 0x73, 0x74,    
    0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,    
    0x64, 0x00, 0x00, 0x00, 0x08, 0x6c, 0x6f, 0x63,    
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00,    
    0x0c, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x6f, 0x72,    
    0x77, 0x61, 0x72, 0x64, 0x73, 0x00, 0x00, 0x00,    
    0x06, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x00,    
    0x00, 0x00, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79,    
    0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,    
    0x69, 0x63, 0x61, 0x74, 0x65, 0x00, 0x00, 0x00,    
    0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61,    
    0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,    
    0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05,    
    0x72, 0x61, 0x6e, 0x67, 0x65, 0x00, 0x00, 0x00,    
    0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,    
    0x00, 0x00, 0x00, 0x0b, 0x72, 0x65, 0x74, 0x72,    
    0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00,    
    0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,    
    0x72, 0x00, 0x00, 0x00, 0x02, 0x74, 0x65, 0x00,    
    0x00, 0x00, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c,    
    0x65, 0x72, 0x00, 0x00, 0x00, 0x11, 0x74, 0x72,    
    0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x65,    
    0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00,    
    0x00, 0x00, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61,    
    0x64, 0x65, 0x00, 0x00, 0x00, 0x0a, 0x75, 0x73,    
    0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,    
    0x00, 0x00, 0x00, 0x04, 0x76, 0x61, 0x72, 0x79,    
    0x00, 0x00, 0x00, 0x03, 0x76, 0x69, 0x61, 0x00,    
    0x00, 0x00, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,    
    0x6e, 0x67, 0x00, 0x00, 0x00, 0x10, 0x77, 0x77,    
    0x77, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,    
    0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x00, 0x00,    
    0x00, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,    
    0x00, 0x00, 0x00, 0x03, 0x67, 0x65, 0x74, 0x00,    
    0x00, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,    
    0x73, 0x00, 0x00, 0x00, 0x06, 0x32, 0x30, 0x30,    
    0x20, 0x4f, 0x4b, 0x00, 0x00, 0x00, 0x07, 0x76,    
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00,    
    0x00, 0x08, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,    
    0x2e, 0x31, 0x00, 0x00, 0x00, 0x03, 0x75, 0x72,    
    0x6c, 0x00, 0x00, 0x00, 0x06, 0x70, 0x75, 0x62,    
    0x6c, 0x69, 0x63, 0x00, 0x00, 0x00, 0x0a, 0x73,    
    0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6f, 0x6b, 0x69,    
    0x65, 0x00, 0x00, 0x00, 0x0a, 0x6b, 0x65, 0x65,    
    0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x00,    
    0x00, 0x00, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,    
    0x6e, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32,    
    0x30, 0x31, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35,    
    0x32, 0x30, 0x36, 0x33, 0x30, 0x30, 0x33, 0x30,    
    0x32, 0x33, 0x30, 0x33, 0x33, 0x30, 0x34, 0x33,    
    0x30, 0x35, 0x33, 0x30, 0x36, 0x33, 0x30, 0x37,    
    0x34, 0x30, 0x32, 0x34, 0x30, 0x35, 0x34, 0x30,    
    0x36, 0x34, 0x30, 0x37, 0x34, 0x30, 0x38, 0x34,    
    0x30, 0x39, 0x34, 0x31, 0x30, 0x34, 0x31, 0x31,    
    0x34, 0x31, 0x32, 0x34, 0x31, 0x33, 0x34, 0x31,    
    0x34, 0x34, 0x31, 0x35, 0x34, 0x31, 0x36, 0x34,    
    0x31, 0x37, 0x35, 0x30, 0x32, 0x35, 0x30, 0x34,    
    0x35, 0x30, 0x35, 0x32, 0x30, 0x33, 0x20, 0x4e,    
    0x6f, 0x6e, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x6f,    
    0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,    
    0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,    
    0x74, 0x69, 0x6f, 0x6e, 0x32, 0x30, 0x34, 0x20,    
    0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65,    
    0x6e, 0x74, 0x33, 0x30, 0x31, 0x20, 0x4d, 0x6f,    
    0x76, 0x65, 0x64, 0x20, 0x50, 0x65, 0x72, 0x6d,    
    0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x34,    
    0x30, 0x30, 0x20, 0x42, 0x61, 0x64, 0x20, 0x52,    
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x34, 0x30,    
    0x31, 0x20, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,    
    0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x34, 0x30,    
    0x33, 0x20, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,    
    0x64, 0x65, 0x6e, 0x34, 0x30, 0x34, 0x20, 0x4e,    
    0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64,    
    0x35, 0x30, 0x30, 0x20, 0x49, 0x6e, 0x74, 0x65,    
    0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72,    
    0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f,    
    0x72, 0x35, 0x30, 0x31, 0x20, 0x4e, 0x6f, 0x74,    
    0x20, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,    
    0x6e, 0x74, 0x65, 0x64, 0x35, 0x30, 0x33, 0x20,    
    0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,    
    0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,    
    0x62, 0x6c, 0x65, 0x4a, 0x61, 0x6e, 0x20, 0x46,    
    0x65, 0x62, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x41,    
    0x70, 0x72, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x4a,    
    0x75, 0x6e, 0x20, 0x4a, 0x75, 0x6c, 0x20, 0x41,    
    0x75, 0x67, 0x20, 0x53, 0x65, 0x70, 0x74, 0x20,    
    0x4f, 0x63, 0x74, 0x20, 0x4e, 0x6f, 0x76, 0x20,    
    0x44, 0x65, 0x63, 0x20, 0x30, 0x30, 0x3a, 0x30,    
    0x30, 0x3a, 0x30, 0x30, 0x20, 0x4d, 0x6f, 0x6e,    
    0x2c, 0x20, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x57,    
    0x65, 0x64, 0x2c, 0x20, 0x54, 0x68, 0x75, 0x2c,    
    0x20, 0x46, 0x72, 0x69, 0x2c, 0x20, 0x53, 0x61,    
    0x74, 0x2c, 0x20, 0x53, 0x75, 0x6e, 0x2c, 0x20,    
    0x47, 0x4d, 0x54, 0x63, 0x68, 0x75, 0x6e, 0x6b,    
    0x65, 0x64, 0x2c, 0x74, 0x65, 0x78, 0x74, 0x2f,    
    0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x69, 0x6d, 0x61,    
    0x67, 0x65, 0x2f, 0x70, 0x6e, 0x67, 0x2c, 0x69,    
    0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a, 0x70, 0x67,    
    0x2c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x67,    
    0x69, 0x66, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78,    
    0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78,    
    0x68, 0x74, 0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c,    
    0x2c, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c,    
    0x61, 0x69, 0x6e, 0x2c, 0x74, 0x65, 0x78, 0x74,    
    0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,    
    0x69, 0x70, 0x74, 0x2c, 0x70, 0x75, 0x62, 0x6c,    
    0x69, 0x63, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,    
    0x65, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65,    
    0x3d, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x64, 0x65,    
    0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x73, 0x64,    
    0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,    
    0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x63,    
    0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x69,    
    0x73, 0x6f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d,    
    0x31, 0x2c, 0x75, 0x74, 0x66, 0x2d, 0x2c, 0x2a,    
    0x2c, 0x65, 0x6e, 0x71, 0x3d, 0x30, 0x2e           
    ]

