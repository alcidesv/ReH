{-# LANGUAGE OverloadedStrings, GeneralizedNewtypeDeriving, FlexibleInstances, MultiParamTypeClasses #-}
module Rede.SpdyProtocol.Streams.State(
    defaultStreamState
    ,initStreamState
    ,unpackRecvHeaders

    ,StreamStage(..)
    ,StreamState(..)
    ,StreamStateT
    ) where 


import           Data.IORef
import qualified Data.ByteString           as B
import qualified Data.ByteString.Lazy      as LB
import           Data.ByteString.Char8     (pack)
import           Data.Default
import           Control.Monad.Morph       (MFunctor)
import qualified Data.Streaming.Zlib       as Z
-- import           System.FilePath           ((</>))
import           Data.Binary.Get           (runGet)
import           Data.Binary.Put           (runPut)
import qualified Data.Binary               as Bi
import           Data.Conduit
import           Data.BitSet.Generic(singleton)

import           Control.Applicative
import           Control.Monad.IO.Class
import           Control.Monad.Trans.Class
import           Control.Monad.Trans.Reader


-- import Rede.MainLoop.ConfigHelp(configDir)
import           Rede.MainLoop.StreamPlug
import           Rede.MainLoop.Tokens
import           Rede.SpdyProtocol.Framing.AnyFrame
import           Rede.SpdyProtocol.Framing.Frame
import           Rede.SpdyProtocol.Framing.KeyValueBlock
import           Rede.SpdyProtocol.Framing.SynReply
import qualified Rede.SpdyProtocol.Framing.SynStream     as SyS
import           Rede.SpdyProtocol.Framing.DataFrame
import qualified Rede.SpdyProtocol.Framing.DataFrame     as DF


data StreamStage =
     Open_StS
    |CanOnlySend_StS
    |CanOnlyReceive_StS
    |Closed_StS
    ;

canSend :: StreamStage -> Bool 
canSend Open_StS             = True 
canSend CanOnlySend_StS      = True 
canSend _                    = False


data WindowBookkeeping = WindowBookkeeping {
      pastBytes   :: Int 
    , futureBytes :: Int 
}


instance Default WindowBookkeeping where 
    def = WindowBookkeeping {
        pastBytes = 0
        ,futureBytes = 0
    }


-- Due to the use of Z here, this struct only
-- makes sense inside the IO monad (or equivalent)
data StreamState = StreamState {
      stage      :: IORef StreamStage
    , receiveWin :: IORef WindowBookkeeping
    , sendWin    :: IORef WindowBookkeeping 
    , sendZlib   :: Z.Deflate
    , recvZlib   :: Z.Inflate 
    , sstreamId  :: IORef Int
    , mustAck    :: IORef Bool
    }


newtype MonadIO m => StreamStateT m a = StreamStateT (ReaderT StreamState m a)
    deriving (Functor, Applicative, Monad, MonadTrans, MFunctor)


initStreamState :: MonadIO m => StreamStateT m a -> m a 
initStreamState (StreamStateT sm)  = do 
    s <- liftIO $ defaultStreamState 
    runReaderT sm s


instance MonadIO m => MonadIO (StreamStateT m) where 
    -- liftIO :: IO a -> m a 
    liftIO iocomp = StreamStateT (liftIO iocomp) 


-- unStreamState :: StreamStateT m a -> StateT StreamState m a 
-- unStreamState (StreamStateT s) = s

instance StreamPlug (StreamStateT IO) AnyFrame where
    inputPlug = do 
        maybe_anyframe <- await 
        case maybe_anyframe of
            Just anyframe -> do 
                stream_input_token <- lift $ anyFrameToInput anyframe
                yield stream_input_token
                inputPlug
            -- TODO: Close StreamWorker? 
            _             -> return ()

    outputPlug = do 
        maybe_action <- await 
        case maybe_action of 

            -- Stream worker asks to send headers
            Just (SendHeaders_SOA unmvl) -> do 
                -- TODO: MUST check that the stream be openened to 
                --       send, take measure if not!!
                current_stage <- lift getCurrentStreamStage  
                must_ack      <- lift getMustAck 
                case (current_stage, must_ack) of 
                    (s, True ) | canSend s -> 
                        prepareSynReplyFrame unmvl

                    -- TODO: 10 000 000 cases more here that need to be populated...
                if must_ack 
                    then lift $ setMustAck False 
                    else return ()

            -- Stream worker asks to send data 
            Just (SendData_SOA bs_data)     -> do
                current_stage <- lift getCurrentStreamStage
                must_ack      <- lift getMustAck
                stream_id     <- lift getStreamId
                case (current_stage, must_ack) of 
                    (s,True) | canSend s -> do 
                        prepareSynReplyFrame (UnpackedNameValueList [])
                        yield $ prepareDataFrame bs_data stream_id
                        lift $ setMustAck False
                    (s,False) | canSend s -> do 
                        yield $ prepareDataFrame bs_data stream_id


        outputPlug

    initStreamPlugs = initStreamState 


prepareDataFrame :: B.ByteString -> Int -> AnyFrame
prepareDataFrame bs_data stream_id = DataFrame_AF $ DataFrame {
                            DF.streamId        = stream_id
                            ,DF.dataFrameFlags = singleton DF.Fin_F
                            ,DF.payload        = bs_data
                            }


anyFrameToInput :: MonadIO m => AnyFrame ->  StreamStateT m StreamInputToken
anyFrameToInput any_frame = 

    case any_frame of 

        ( AnyControl_AF (SynStream_ACF synstream) ) -> let 
               CompressedKeyValueBlock compressed_headers_bytestring = getCompressedHeaders synstream
               stream_id                                             = SyS.streamId synstream
               stream_unidirectional                                 = getFrameFlag synstream SyS.Unidirectional_SSVF
               stream_fin                                            = getFrameFlag synstream SyS.Fin_SSVF
            in 
              do 
                unvl <- unpackRecvHeaders compressed_headers_bytestring 
                setStreamId stream_id   
                case (stream_unidirectional, stream_fin) of 
                    (True, True)       ->  setCurrentStreamStage  Closed_StS
                    (True, False)      ->  setCurrentStreamStage  CanOnlyReceive_StS
                    (False, True)      ->  setCurrentStreamStage  CanOnlySend_StS
                    (False, False)     ->  setCurrentStreamStage  Open_StS
                return $ Headers_STk unvl


prepareSynReplyFrame :: UnpackedNameValueList -> ConduitM  StreamOutputAction AnyFrame (StreamStateT IO) ()
prepareSynReplyFrame unmvl = do 
    compressed_headers <- lift $ packSendHeaders unmvl
    stream_id          <- lift $ getStreamId
    syn_reply          <- return $ SynReplyFrame def stream_id compressed_headers
    yield (AnyControl_AF (SynReplyFrame_ACF syn_reply))   


unpackRecvHeaders :: MonadIO m => B.ByteString -> StreamStateT m UnpackedNameValueList
unpackRecvHeaders compressed_stuff = do 
    recv_zlib          <- StreamStateT $ asks recvZlib
    popper             <- liftIO $ Z.feedInflate recv_zlib compressed_stuff
    list_piece_1       <- liftIO  $ exhaustPopper popper 
    latest             <- liftIO $ Z.flushInflate recv_zlib
    uncompressed_bytes <- return $ B.concat (list_piece_1 ++ [latest])  
    unvl               <- return $ runGet Bi.get $ LB.fromChunks [uncompressed_bytes]
    return unvl
   

exhaustPopper :: Z.Popper   -> IO [B.ByteString]
exhaustPopper popper = do 
    x                  <- popper 
    case x of 
        Z.PRDone            -> return []
        Z.PRNext bytestring -> do 
            more <- exhaustPopper popper 
            return $ (bytestring:more)


packSendHeaders :: MonadIO m => UnpackedNameValueList -> StreamStateT m CompressedKeyValueBlock
packSendHeaders uncompressed_uvl = do 
    uncompressed_bytes <- return $ LB.toStrict $ runPut $ Bi.put $ uncompressed_uvl
    send_zlib <- StreamStateT $ asks sendZlib
    liftIO $ do
        popper       <-  Z.feedDeflate send_zlib uncompressed_bytes
        list_piece_1 <-  exhaustPopper popper 
        latest_piece <-  exhaustPopper $ Z.flushDeflate send_zlib
        return $ CompressedKeyValueBlock $ B.concat (list_piece_1 ++ latest_piece)
    


ioSet :: MonadIO m => (StreamState -> IORef a) -> a -> StreamStateT m ()
ioSet member new_val  = StreamStateT $ do 
    io_ref <- asks member
    liftIO $ writeIORef io_ref new_val


ioGet :: MonadIO m => (StreamState -> IORef a) -> StreamStateT m a
ioGet member = StreamStateT $ do 
    io_ref <- asks member
    liftIO $ readIORef io_ref


-- Member get/set from the stream state computation monad 
getCurrentStreamStage :: MonadIO m => StreamStateT m  StreamStage
getCurrentStreamStage = ioGet stage

setCurrentStreamStage :: MonadIO m => StreamStage -> StreamStateT m () 
setCurrentStreamStage = ioSet stage

setStreamId  :: MonadIO m => Int -> StreamStateT m ()
setStreamId = ioSet sstreamId

getStreamId :: MonadIO m => StreamStateT m Int 
getStreamId = ioGet sstreamId

setMustAck  :: MonadIO m => Bool -> StreamStateT m ()
setMustAck = ioSet mustAck

getMustAck :: MonadIO m => StreamStateT m Bool 
getMustAck = ioGet mustAck


defaultStreamState :: IO StreamState 
defaultStreamState = do
    send_zlib <- Z.initDeflateWithDictionary 2 zLibInitDict Z.defaultWindowBits
    recv_zlib <- Z.initInflateWithDictionary Z.defaultWindowBits zLibInitDict
    stage_ioref <- newIORef Closed_StS
    rw <- newIORef def 
    sw <- newIORef def 
    ma <- newIORef True
    ssid <- newIORef $ error "Notinitialized"
    return $ StreamState {
        stage        = stage_ioref
        ,receiveWin  = rw 
        ,sendWin     = sw 
        ,sendZlib    = send_zlib
        ,recvZlib    = recv_zlib
        ,sstreamId   = ssid
        ,mustAck     = ma
    }


zLibInitDict :: B.ByteString
zLibInitDict = pack $ map toEnum  [
    0x00, 0x00, 0x00, 0x07, 0x6f, 0x70, 0x74, 0x69,    
    0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x04, 0x68,    
    0x65, 0x61, 0x64, 0x00, 0x00, 0x00, 0x04, 0x70,    
    0x6f, 0x73, 0x74, 0x00, 0x00, 0x00, 0x03, 0x70,    
    0x75, 0x74, 0x00, 0x00, 0x00, 0x06, 0x64, 0x65,    
    0x6c, 0x65, 0x74, 0x65, 0x00, 0x00, 0x00, 0x05,    
    0x74, 0x72, 0x61, 0x63, 0x65, 0x00, 0x00, 0x00,    
    0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x00,    
    0x00, 0x00, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,    
    0x74, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,    
    0x74, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x63, 0x63,    
    0x65, 0x70, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f,    
    0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x0f,    
    0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6c,    
    0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x00,    
    0x00, 0x00, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70,    
    0x74, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,    
    0x00, 0x00, 0x00, 0x03, 0x61, 0x67, 0x65, 0x00,    
    0x00, 0x00, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,    
    0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x74, 0x68,    
    0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,    
    0x6e, 0x00, 0x00, 0x00, 0x0d, 0x63, 0x61, 0x63,    
    0x68, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,    
    0x6f, 0x6c, 0x00, 0x00, 0x00, 0x0a, 0x63, 0x6f,    
    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,    
    0x00, 0x00, 0x00, 0x0c, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x62, 0x61, 0x73, 0x65,    
    0x00, 0x00, 0x00, 0x10, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x65, 0x6e, 0x63, 0x6f,    
    0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x10,    
    0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,    
    0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,    
    0x00, 0x00, 0x00, 0x0e, 0x63, 0x6f, 0x6e, 0x74,    
    0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x65, 0x6e, 0x67,    
    0x74, 0x68, 0x00, 0x00, 0x00, 0x10, 0x63, 0x6f,    
    0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00,    
    0x00, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,    
    0x74, 0x2d, 0x6d, 0x64, 0x35, 0x00, 0x00, 0x00,    
    0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,    
    0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x00, 0x00,    
    0x00, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,    
    0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00,    
    0x00, 0x04, 0x64, 0x61, 0x74, 0x65, 0x00, 0x00,    
    0x00, 0x04, 0x65, 0x74, 0x61, 0x67, 0x00, 0x00,    
    0x00, 0x06, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,    
    0x00, 0x00, 0x00, 0x07, 0x65, 0x78, 0x70, 0x69,    
    0x72, 0x65, 0x73, 0x00, 0x00, 0x00, 0x04, 0x66,    
    0x72, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x04, 0x68,    
    0x6f, 0x73, 0x74, 0x00, 0x00, 0x00, 0x08, 0x69,    
    0x66, 0x2d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x00,    
    0x00, 0x00, 0x11, 0x69, 0x66, 0x2d, 0x6d, 0x6f,    
    0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x73,    
    0x69, 0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x0d,    
    0x69, 0x66, 0x2d, 0x6e, 0x6f, 0x6e, 0x65, 0x2d,    
    0x6d, 0x61, 0x74, 0x63, 0x68, 0x00, 0x00, 0x00,    
    0x08, 0x69, 0x66, 0x2d, 0x72, 0x61, 0x6e, 0x67,    
    0x65, 0x00, 0x00, 0x00, 0x13, 0x69, 0x66, 0x2d,    
    0x75, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,    
    0x65, 0x64, 0x2d, 0x73, 0x69, 0x6e, 0x63, 0x65,    
    0x00, 0x00, 0x00, 0x0d, 0x6c, 0x61, 0x73, 0x74,    
    0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,    
    0x64, 0x00, 0x00, 0x00, 0x08, 0x6c, 0x6f, 0x63,    
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00,    
    0x0c, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x6f, 0x72,    
    0x77, 0x61, 0x72, 0x64, 0x73, 0x00, 0x00, 0x00,    
    0x06, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x00,    
    0x00, 0x00, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79,    
    0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,    
    0x69, 0x63, 0x61, 0x74, 0x65, 0x00, 0x00, 0x00,    
    0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d, 0x61,    
    0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,    
    0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05,    
    0x72, 0x61, 0x6e, 0x67, 0x65, 0x00, 0x00, 0x00,    
    0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72,    
    0x00, 0x00, 0x00, 0x0b, 0x72, 0x65, 0x74, 0x72,    
    0x79, 0x2d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00,    
    0x00, 0x00, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,    
    0x72, 0x00, 0x00, 0x00, 0x02, 0x74, 0x65, 0x00,    
    0x00, 0x00, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c,    
    0x65, 0x72, 0x00, 0x00, 0x00, 0x11, 0x74, 0x72,    
    0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x65,    
    0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x00,    
    0x00, 0x00, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61,    
    0x64, 0x65, 0x00, 0x00, 0x00, 0x0a, 0x75, 0x73,    
    0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,    
    0x00, 0x00, 0x00, 0x04, 0x76, 0x61, 0x72, 0x79,    
    0x00, 0x00, 0x00, 0x03, 0x76, 0x69, 0x61, 0x00,    
    0x00, 0x00, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,    
    0x6e, 0x67, 0x00, 0x00, 0x00, 0x10, 0x77, 0x77,    
    0x77, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,    
    0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x00, 0x00,    
    0x00, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,    
    0x00, 0x00, 0x00, 0x03, 0x67, 0x65, 0x74, 0x00,    
    0x00, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,    
    0x73, 0x00, 0x00, 0x00, 0x06, 0x32, 0x30, 0x30,    
    0x20, 0x4f, 0x4b, 0x00, 0x00, 0x00, 0x07, 0x76,    
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00,    
    0x00, 0x08, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,    
    0x2e, 0x31, 0x00, 0x00, 0x00, 0x03, 0x75, 0x72,    
    0x6c, 0x00, 0x00, 0x00, 0x06, 0x70, 0x75, 0x62,    
    0x6c, 0x69, 0x63, 0x00, 0x00, 0x00, 0x0a, 0x73,    
    0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6f, 0x6b, 0x69,    
    0x65, 0x00, 0x00, 0x00, 0x0a, 0x6b, 0x65, 0x65,    
    0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x00,    
    0x00, 0x00, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,    
    0x6e, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x32,    
    0x30, 0x31, 0x32, 0x30, 0x32, 0x32, 0x30, 0x35,    
    0x32, 0x30, 0x36, 0x33, 0x30, 0x30, 0x33, 0x30,    
    0x32, 0x33, 0x30, 0x33, 0x33, 0x30, 0x34, 0x33,    
    0x30, 0x35, 0x33, 0x30, 0x36, 0x33, 0x30, 0x37,    
    0x34, 0x30, 0x32, 0x34, 0x30, 0x35, 0x34, 0x30,    
    0x36, 0x34, 0x30, 0x37, 0x34, 0x30, 0x38, 0x34,    
    0x30, 0x39, 0x34, 0x31, 0x30, 0x34, 0x31, 0x31,    
    0x34, 0x31, 0x32, 0x34, 0x31, 0x33, 0x34, 0x31,    
    0x34, 0x34, 0x31, 0x35, 0x34, 0x31, 0x36, 0x34,    
    0x31, 0x37, 0x35, 0x30, 0x32, 0x35, 0x30, 0x34,    
    0x35, 0x30, 0x35, 0x32, 0x30, 0x33, 0x20, 0x4e,    
    0x6f, 0x6e, 0x2d, 0x41, 0x75, 0x74, 0x68, 0x6f,    
    0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,    
    0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,    
    0x74, 0x69, 0x6f, 0x6e, 0x32, 0x30, 0x34, 0x20,    
    0x4e, 0x6f, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65,    
    0x6e, 0x74, 0x33, 0x30, 0x31, 0x20, 0x4d, 0x6f,    
    0x76, 0x65, 0x64, 0x20, 0x50, 0x65, 0x72, 0x6d,    
    0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x34,    
    0x30, 0x30, 0x20, 0x42, 0x61, 0x64, 0x20, 0x52,    
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x34, 0x30,    
    0x31, 0x20, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,    
    0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x34, 0x30,    
    0x33, 0x20, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,    
    0x64, 0x65, 0x6e, 0x34, 0x30, 0x34, 0x20, 0x4e,    
    0x6f, 0x74, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64,    
    0x35, 0x30, 0x30, 0x20, 0x49, 0x6e, 0x74, 0x65,    
    0x72, 0x6e, 0x61, 0x6c, 0x20, 0x53, 0x65, 0x72,    
    0x76, 0x65, 0x72, 0x20, 0x45, 0x72, 0x72, 0x6f,    
    0x72, 0x35, 0x30, 0x31, 0x20, 0x4e, 0x6f, 0x74,    
    0x20, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,    
    0x6e, 0x74, 0x65, 0x64, 0x35, 0x30, 0x33, 0x20,    
    0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,    
    0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,    
    0x62, 0x6c, 0x65, 0x4a, 0x61, 0x6e, 0x20, 0x46,    
    0x65, 0x62, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x41,    
    0x70, 0x72, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x4a,    
    0x75, 0x6e, 0x20, 0x4a, 0x75, 0x6c, 0x20, 0x41,    
    0x75, 0x67, 0x20, 0x53, 0x65, 0x70, 0x74, 0x20,    
    0x4f, 0x63, 0x74, 0x20, 0x4e, 0x6f, 0x76, 0x20,    
    0x44, 0x65, 0x63, 0x20, 0x30, 0x30, 0x3a, 0x30,    
    0x30, 0x3a, 0x30, 0x30, 0x20, 0x4d, 0x6f, 0x6e,    
    0x2c, 0x20, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x57,    
    0x65, 0x64, 0x2c, 0x20, 0x54, 0x68, 0x75, 0x2c,    
    0x20, 0x46, 0x72, 0x69, 0x2c, 0x20, 0x53, 0x61,    
    0x74, 0x2c, 0x20, 0x53, 0x75, 0x6e, 0x2c, 0x20,    
    0x47, 0x4d, 0x54, 0x63, 0x68, 0x75, 0x6e, 0x6b,    
    0x65, 0x64, 0x2c, 0x74, 0x65, 0x78, 0x74, 0x2f,    
    0x68, 0x74, 0x6d, 0x6c, 0x2c, 0x69, 0x6d, 0x61,    
    0x67, 0x65, 0x2f, 0x70, 0x6e, 0x67, 0x2c, 0x69,    
    0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6a, 0x70, 0x67,    
    0x2c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x67,    
    0x69, 0x66, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78,    
    0x6d, 0x6c, 0x2c, 0x61, 0x70, 0x70, 0x6c, 0x69,    
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78,    
    0x68, 0x74, 0x6d, 0x6c, 0x2b, 0x78, 0x6d, 0x6c,    
    0x2c, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c,    
    0x61, 0x69, 0x6e, 0x2c, 0x74, 0x65, 0x78, 0x74,    
    0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,    
    0x69, 0x70, 0x74, 0x2c, 0x70, 0x75, 0x62, 0x6c,    
    0x69, 0x63, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,    
    0x65, 0x6d, 0x61, 0x78, 0x2d, 0x61, 0x67, 0x65,    
    0x3d, 0x67, 0x7a, 0x69, 0x70, 0x2c, 0x64, 0x65,    
    0x66, 0x6c, 0x61, 0x74, 0x65, 0x2c, 0x73, 0x64,    
    0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,    
    0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x63,    
    0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x69,    
    0x73, 0x6f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d,    
    0x31, 0x2c, 0x75, 0x74, 0x66, 0x2d, 0x2c, 0x2a,    
    0x2c, 0x65, 0x6e, 0x71, 0x3d, 0x30, 0x2e           
    ]